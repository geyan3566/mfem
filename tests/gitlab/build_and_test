#!/usr/bin/env bash

# Copyright (c) 2010-2021, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

set -o errexit
set -o nounset

script_name=$(basename $0)

function usage()
{
  echo "MFEM CI build and test driver"
  echo ""
  echo "Syntax:"
  echo "> ${script_name} --spec \"spack spec\" [--deps-only] [--data]"
  echo "                 [--build-root /path/to/build/resource]"
  echo ""
  echo "> ${script_name} --build-only [--data]"
  echo "                 [--build-root /path/to/build/resource]"
  echo ""
  echo "> ${script_name} --test-only [--data]"
  echo "                 [--build-root /path/to/build/resource]"
  echo ""
  echo "Options:"
  echo " --spec"
  echo "    The most common usage is to pass a spack spec to the script."
  echo "    This spec may or may not specify \"mfem\" as the package, since it"
  echo "    is the default."
  echo ""
  echo " --deps-only"
  echo "    Only install MFEM dependencies. Will clone mfem-uberenv to drive a"
  echo "    local instance on spack with which we install the dependencies."
  echo "    This local spack instance is tuned to be completely independent"
  echo "    from the user environment."
  echo ""
  echo " --build-only"
  echo "    Only build MFEM, based on the existing configuration."
  echo ""
  echo " --test-only"
  echo "    Only test MFEM, based on the existing configuration."
  echo ""
  echo " --data"
  echo "    Make running tests with \"--data\" a requirement: will fail in the"
  echo "    data directory is not present in the parent of the mfem root directory."
  echo "    Note: default behavior is to run data tests if data dir is present."
  echo ""
  echo " --build-root=/path/to/build/resource"
  echo "    The script will use this directory to find the external resource"
  echo "    needed, e.g. the data directory. Defaults to the parent location"
  echo "    of the MFEM clone."
  echo ""
}

hostname="$(hostname)"
project_dir="$(pwd)"

mode=""
build_root=""
spec=""
with_data=false

sys_type=${SYS_TYPE:-""}
py_env_path=${PYTHON_ENVIRONMENT_PATH:-""}
ci_context=${CI:-""}

threads=${THREADS:-""}

# Options
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --spec)
            spec="$2"
            shift # past argument
            shift # past value
            ;;
        --deps-only|--build-only|--test-only)
            mode="$key"
            shift # past argument
            ;;
        --data)
            with_data=true
            shift # past argument
            ;;
        --build-root)
            build_root="$2"
            shift # past argument
            shift # past value
            ;;
        -h|--help)
            usage
            exit 0;
            ;;
        *)  # unknown option
            echo "ERROR: option $key is unknown"
            exit 1;
            ;;
    esac
done

# Dependencies
if [[ "${mode}" != "--build-only" && "${mode}" != "--test-only" ]]
then
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "~~~~~ Building Dependencies"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

    if [[ -z ${spec} ]]
    then
        echo "--spec is mandatory to build dependencies, aborting..."
        exit 1
    fi

    upstream_opt=""
    if [[ ${CI_COMMIT_BRANCH:-"master"} != "master" && ${sys_type} != "" ]]
    then
        upstream_opt="--upstream=/usr/workspace/mfem/mfem-dependencies/install"
    fi

    prefix_opt=""

    # Do not run on /dev/shm if only installing dependencies: they will be lost
    # otherwise.
    if [[ -d "/dev/shm" && "${mode}" != "--deps-only" ]]
    then
        prefix="/dev/shm/${hostname}/${CI_PIPELINE_ID:-"NONE"}_${RANDOM}"
        mkdir -p ${prefix}
        echo ${spec} > spec.txt
        prefix_opt="--prefix=${prefix}"
    fi

    echo "Fetching uberenv."
    tests/gitlab/get_mfem_uberenv || ( echo "Error fetching Uberenv" && exit 1 );

    echo "Removing existing configuration"
    make distclean

    echo "Installing dependencies."
    python tests/uberenv/uberenv.py --spec="${spec}" "${upstream_opt}" "${prefix_opt}"

    # Make sure that a configuration was generated by spack (part 1).
    cp config/config.mk config/spack-config.mk
    cp config/_config.hpp config/spack_config.hpp
fi

# Configuration
if [[ "${mode}" != "--deps-only" ]]
then
# Host config file
# Make sure that a configuration was generated by spack (part 2).
# Without this running the rest of the script would generate a new config.
    if [[ -f "config/spack-config.mk" && -f "config/spack_config.hpp" ]]
    then
        cp config/spack-config.mk config/config.mk
        cp config/spack_config.hpp config/_config.hpp
    else
        echo "No result for at least one of"
        echo "    ${project_dir}/config/spack-config.mk"
        echo "    ${project_dir}/config/spack_config.hpp"
        echo "ERROR: Spack generated configuration not found."
        exit 1
    fi

    # Build and Data Directories
    if [[ -z ${build_root} ]]
    then
        # By default, build_root is the project parent dir.
        build_root="${project_dir}/.."
    else
        # build_root is specified, so we need to link its content into the
        # project parent dir.
        ln -sf ${build_root}/data ${project_dir}/../
    fi

    if [[ "$with_data" == "true" && ! -d ${build_root}/data ]]
    then
        echo "ERROR: ${build_root}/data not found while asking for --data".
    fi
fi

# Build (also build when asked for testing, to make sure we test what we want)
if [[ "${mode}" != "--deps-only" ]]
then
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "~ Project Dir: ${project_dir}"
    echo "~ Build Root: ${build_root}"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "~~~~~ Building MFEM"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

    make all -j ${threads}
fi

# Test
if [[ "${mode}" != "--deps-only" && "${mode}" != "--build-only" ]]
then
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "~~~~~ Testing MFEM"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

    return_code=0
    make test 2>&1 | tee tests_output.txt || return_code=${?}

    if grep -q "All tests passed." ./tests_output.txt
    then
        echo "SUCCESS: No error during tests" && exit 0
    else
        echo "ERROR: failure(s) while running MFEM tests" && exit 1
    fi
fi
